import numpy as np
from model import Model

# Constants
DictOfPredictionLevels = {
    1 : "LAYING",
    2 : "SITTING",
    3 : "STANDING",
    4 : "WALKING",
    5 : "WALKING.DOWNSTAIRS",
    6 : "WALKING.UPSTAIRS"
}

MODEL_PATH = "./RModel/randomForest"
MODEL_PATH_SMALL = "./RModel/randomForestSmall"
MODEL_PATH_CARET = "./RModel/randomForestCaret"
MODEL_PATH_SVM = "./RModel/svm"

XY = np.array([[5.1, 3.5,  1.4, 0.2], # setosa
              [6.1, 2.6,  5.6, 1.4]])  # virginica

X = np.array([[2.2589, -0.02238]])
#X = np.array([[2.2589,-0.022376,-0.90958,-0.021424,1.2888,0.16368,0.26826,0.10147,0.76145,-0.59784,0.46626,-0.31174,-0.15975,0.11145,-0.68246,-0.034257,-0.0033814,-0.42308,-0.43907,-0.21214,-0.99991,1.83,-0.97814,0.20724,0.93803,-0.45992,-1,0.076765,0.63745,0.64455,0.25477,-0.99804,-0.19289,-0.17054,-0.047823,-0.32205,0.12407,0.10587,-0.86953,1.1636,-0.87224,-0.43055,0.39508,-0.085318,-0.081122,0.21934,0.068343,-0.29377,0.43784,-0.091717,-0.53883,0.33865,0.23447,0.27644,-0.078343,0.034351,0.28164,-0.098784,0.20471,-0.13111,0.21023,0.23134,0.73962,0.063422,0.014906,-0.13453,0.34638,0.55638,-0.10193,0.21902,0.10388,0.11838,0.055671,0.28009,-0.24003,0.27918,-0.29612,0.41325,0.045048,0.5742,0.77476,0.7656,-0.19587,-0.24712,0.71565,-0.14223,0.11663,-0.015804,-0.42131,-0.29299,0.06893,-0.14523,-0.60129,0.9077,0.51804,-0.41264,-0.1812,-0.0053355,-0.871,-0.90306,0.55545,-1,-0.066667,-1,-0.7664,-0.0037335,-0.3075,-0.7014,-0.95161,-0.95159,-0.88375,-0.72139,-0.98772,-0.92657,-0.5382,-0.98325,-0.86939,0.46625,-0.36,-0.44,-0.36782,-0.59696,-0.076249,-0.3561,-0.42182,-0.82059,-0.81637,-0.94665,-0.81525,-0.86035,-0.98428,-0.87307,-0.76505,-0.89823,-0.8972,-0.74375,-0.63553,-0.77519,-0.71802,0.51531,-1,0.22581,-0.93103,-0.25923,0.16243,0.1906,-0.57979,-0.48813,-0.79728,-0.87114,-0.90844,-0.87194,-0.95606,-0.96132,-0.97553,-0.90307,-0.94645,-0.96451,-0.85673,-0.84797,-0.93368,-0.93497,0.86951,0.35215,0.5031,-1,0.28495,-0.46328,0.38739,-0.90476,-0.27287,-0.42665,-0.38722,0.56873,-0.28724,-0.6822,0.38049,-0.87302,-0.41445,-0.76696,-0.97427,0.46312,-0.53861,0.29091],
#              [2.2589,-0.022376,-0.90958,-0.021424,1.2888,0.16368,0.26826,0.10147,0.76145,-0.59784,0.46626,-0.31174,-0.15975,0.11145,-0.68246,-0.034257,-0.0033814,-0.42308,-0.43907,-0.21214,-0.99991,1.83,-0.97814,0.20724,0.93803,-0.45992,-1,0.076765,0.63745,0.64455,0.25477,-0.99804,-0.19289,-0.17054,-0.047823,-0.32205,0.12407,0.10587,-0.86953,1.1636,-0.87224,-0.43055,0.39508,-0.085318,-0.081122,0.21934,0.068343,-0.29377,0.43784,-0.091717,-0.53883,0.33865,0.23447,0.27644,-0.078343,0.034351,0.28164,-0.098784,0.20471,-0.13111,0.21023,0.23134,0.73962,0.063422,0.014906,-0.13453,0.34638,0.55638,-0.10193,0.21902,0.10388,0.11838,0.055671,0.28009,-0.24003,0.27918,-0.29612,0.41325,0.045048,0.5742,0.77476,0.7656,-0.19587,-0.24712,0.71565,-0.14223,0.11663,-0.015804,-0.42131,-0.29299,0.06893,-0.14523,-0.60129,0.9077,0.51804,-0.41264,-0.1812,-0.0053355,-0.871,-0.90306,0.55545,-1,-0.066667,-1,-0.7664,-0.0037335,-0.3075,-0.7014,-0.95161,-0.95159,-0.88375,-0.72139,-0.98772,-0.92657,-0.5382,-0.98325,-0.86939,0.46625,-0.36,-0.44,-0.36782,-0.59696,-0.076249,-0.3561,-0.42182,-0.82059,-0.81637,-0.94665,-0.81525,-0.86035,-0.98428,-0.87307,-0.76505,-0.89823,-0.8972,-0.74375,-0.63553,-0.77519,-0.71802,0.51531,-1,0.22581,-0.93103,-0.25923,0.16243,0.1906,-0.57979,-0.48813,-0.79728,-0.87114,-0.90844,-0.87194,-0.95606,-0.96132,-0.97553,-0.90307,-0.94645,-0.96451,-0.85673,-0.84797,-0.93368,-0.93497,0.86951,0.35215,0.5031,-1,0.28495,-0.46328,0.38739,-0.90476,-0.27287,-0.42665,-0.38722,0.56873,-0.28724,-0.6822,0.38049,-0.87302,-0.41445,-0.76696,-0.97427,0.46312,-0.53861,0.29091]])
XYC = np.array([[2.2589, -0.022376, -0.90958, -0.021424, 1.2888, 0.16368, 0.26826, 0.10147, 0.76145, -0.59784, 0.46626,
                   -0.31174, -0.15975, 0.11145, -0.68246, -0.034257, -0.0033814, -0.42308, -0.43907, -0.21214, -0.99991,
                   1.83, -0.97814, 0.20724, 0.93803, -0.45992, -1, 0.076765, 0.63745, 0.64455, 0.25477, -0.99804,
                   -0.19289, -0.17054, -0.047823, -0.32205, 0.12407, 0.10587, -0.86953, 1.1636, -0.87224, -0.43055,
                   0.39508, -0.085318, -0.081122, 0.21934, 0.068343, -0.29377, 0.43784, -0.091717, -0.53883, 0.33865,
                   0.23447, 0.27644, -0.078343, 0.034351, 0.28164, -0.098784, 0.20471, -0.13111, 0.21023, 0.23134,
                   0.73962, 0.063422, 0.014906, -0.13453, 0.34638, 0.55638, -0.10193, 0.21902, 0.10388, 0.11838,
                   0.055671, 0.28009, -0.24003, 0.27918, -0.29612, 0.41325, 0.045048, 0.5742, 0.77476, 0.7656, -0.19587,
                   -0.24712, 0.71565, -0.14223, 0.11663, -0.015804, -0.42131, -0.29299, 0.06893, -0.14523, -0.60129,
                   0.9077, 0.51804, -0.41264, -0.1812, -0.0053355, -0.871, -0.90306, 0.55545, -1, -0.066667, -1, -0.7664,
                   -0.0037335, -0.3075, -0.7014, -0.95161, -0.95159, -0.88375, -0.72139, -0.98772, -0.92657, -0.5382,
                   -0.98325, -0.86939, 0.46625, -0.36, -0.44, -0.36782, -0.59696, -0.076249, -0.3561, -0.42182, -0.82059,
                   -0.81637, -0.94665, -0.81525, -0.86035, -0.98428, -0.87307, -0.76505, -0.89823, -0.8972, -0.74375,
                   -0.63553, -0.77519, -0.71802, 0.51531, -1, 0.22581, -0.93103, -0.25923, 0.16243, 0.1906, -0.57979,
                   -0.48813, -0.79728, -0.87114, -0.90844, -0.87194, -0.95606, -0.96132, -0.97553, -0.90307, -0.94645,
                   -0.96451, -0.85673, -0.84797, -0.93368, -0.93497, 0.86951, 0.35215, 0.5031, -1, 0.28495, -0.46328,
                   0.38739, -0.90476, -0.27287, -0.42665, -0.38722, 0.56873, -0.28724, -0.6822, 0.38049, -0.87302,
                   -0.41445, -0.76696, -0.97427, 0.46312, -0.53861, 0.29091]])


def modelprediction(data):
    model = Model().load(MODEL_PATH)
    print(data)
    pred = model.predict(data)
    levelName = ""
    if pred is not None:
        levelName = DictOfPredictionLevels[pred]
    print(levelName)
    #print(pred)
    # Predict output
    return str(levelName)

def modelpredictionSmall(data):
    model = Model().load(MODEL_PATH_SMALL)
    pred = model.predict(data)
    levelName = ""
    if pred is not None:
      levelName = DictOfPredictionLevels[pred]
    #print(levelName)
    #print(pred)
    # Predict output
    return str(levelName)

def modelpredictionCaret(data):
    model = Model().load(MODEL_PATH_CARET)
    pred = model.predict(data)
    levelName = ""
    if pred is not None:
      levelName = DictOfPredictionLevels[pred]
    #print(levelName)
    #print(pred)
    # Predict output
    return str(levelName)

def modelpredictionSVM(data):
    model = Model().load(MODEL_PATH_SVM)
    #print(data)
    pred = model.predict(data)
    #print(pred)
    # Predict output
    return (pred)

def doublevalue(data1):
    test = data1 ;
    print(type(data1))
    return test

prediction = modelpredictionCaret(XYC)
print(prediction)
